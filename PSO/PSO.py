# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PSO', [dirname(__file__)])
        except ImportError:
            import _PSO
            return _PSO
        if fp is not None:
            try:
                _mod = imp.load_module('_PSO', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PSO = swig_import_helper()
    del swig_import_helper
else:
    import _PSO
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PSO.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _PSO.SwigPyIterator_value(self)
    def incr(self, n=1): return _PSO.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _PSO.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _PSO.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _PSO.SwigPyIterator_equal(self, *args)
    def copy(self): return _PSO.SwigPyIterator_copy(self)
    def next(self): return _PSO.SwigPyIterator_next(self)
    def __next__(self): return _PSO.SwigPyIterator___next__(self)
    def previous(self): return _PSO.SwigPyIterator_previous(self)
    def advance(self, *args): return _PSO.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _PSO.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _PSO.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _PSO.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _PSO.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _PSO.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _PSO.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _PSO.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Particle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr
    __swig_getmethods__["INDEX"] = _PSO.Particle_INDEX_get
    if _newclass:INDEX = _swig_property(_PSO.Particle_INDEX_get)
    __swig_setmethods__["currentPosition"] = _PSO.Particle_currentPosition_set
    __swig_getmethods__["currentPosition"] = _PSO.Particle_currentPosition_get
    if _newclass:currentPosition = _swig_property(_PSO.Particle_currentPosition_get, _PSO.Particle_currentPosition_set)
    __swig_setmethods__["currentVelocity"] = _PSO.Particle_currentVelocity_set
    __swig_getmethods__["currentVelocity"] = _PSO.Particle_currentVelocity_get
    if _newclass:currentVelocity = _swig_property(_PSO.Particle_currentVelocity_get, _PSO.Particle_currentVelocity_set)
    __swig_setmethods__["currentValue"] = _PSO.Particle_currentValue_set
    __swig_getmethods__["currentValue"] = _PSO.Particle_currentValue_get
    if _newclass:currentValue = _swig_property(_PSO.Particle_currentValue_get, _PSO.Particle_currentValue_set)
    __swig_setmethods__["bestPosition"] = _PSO.Particle_bestPosition_set
    __swig_getmethods__["bestPosition"] = _PSO.Particle_bestPosition_get
    if _newclass:bestPosition = _swig_property(_PSO.Particle_bestPosition_get, _PSO.Particle_bestPosition_set)
    __swig_setmethods__["bestValue"] = _PSO.Particle_bestValue_set
    __swig_getmethods__["bestValue"] = _PSO.Particle_bestValue_get
    if _newclass:bestValue = _swig_property(_PSO.Particle_bestValue_get, _PSO.Particle_bestValue_set)
    def __init__(self, *args): 
        this = _PSO.new_Particle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PSO.delete_Particle
    __del__ = lambda self : None;
Particle_swigregister = _PSO.Particle_swigregister
Particle_swigregister(Particle)

class BaseParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseParameters, name)
    __repr__ = _swig_repr
    def _setIntParam(self, *args): return _PSO.BaseParameters__setIntParam(self, *args)
    def _setDoubleParam(self, *args): return _PSO.BaseParameters__setDoubleParam(self, *args)
    def _setStringParam(self, *args): return _PSO.BaseParameters__setStringParam(self, *args)
    def _setIntArrayParam(self, *args): return _PSO.BaseParameters__setIntArrayParam(self, *args)
    def _setDoubleArrayParam(self, *args): return _PSO.BaseParameters__setDoubleArrayParam(self, *args)
    def _setStringArrayParam(self, *args): return _PSO.BaseParameters__setStringArrayParam(self, *args)
    def __init__(self): 
        if self.__class__ == BaseParameters:
            _self = None
        else:
            _self = self
        this = _PSO.new_BaseParameters(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PSO.delete_BaseParameters
    __del__ = lambda self : None;
    def getIntParam(self, *args): return _PSO.BaseParameters_getIntParam(self, *args)
    def getDoubleParam(self, *args): return _PSO.BaseParameters_getDoubleParam(self, *args)
    def getStringParam(self, *args): return _PSO.BaseParameters_getStringParam(self, *args)
    def getIntArrayParam(self, *args): return _PSO.BaseParameters_getIntArrayParam(self, *args)
    def getDoubleArrayParam(self, *args): return _PSO.BaseParameters_getDoubleArrayParam(self, *args)
    def getStringArrayParam(self, *args): return _PSO.BaseParameters_getStringArrayParam(self, *args)
    def __disown__(self):
        self.this.disown()
        _PSO.disown_BaseParameters(self)
        return weakref_proxy(self)
BaseParameters_swigregister = _PSO.BaseParameters_swigregister
BaseParameters_swigregister(BaseParameters)

class AbstractSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractSpace, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == AbstractSpace:
            _self = None
        else:
            _self = self
        this = _PSO.new_AbstractSpace(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PSO.delete_AbstractSpace
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _PSO.disown_AbstractSpace(self)
        return weakref_proxy(self)
AbstractSpace_swigregister = _PSO.AbstractSpace_swigregister
AbstractSpace_swigregister(AbstractSpace)

class AbstractFitness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractFitness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractFitness, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == AbstractFitness:
            _self = None
        else:
            _self = self
        this = _PSO.new_AbstractFitness(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PSO.delete_AbstractFitness
    __del__ = lambda self : None;
    def evaluation(self, *args): return _PSO.AbstractFitness_evaluation(self, *args)
    def __disown__(self):
        self.this.disown()
        _PSO.disown_AbstractFitness(self)
        return weakref_proxy(self)
AbstractFitness_swigregister = _PSO.AbstractFitness_swigregister
AbstractFitness_swigregister(AbstractFitness)

class PSO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PSO.new_PSO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PSO.delete_PSO
    __del__ = lambda self : None;
    def launch(self): return _PSO.PSO_launch(self)
PSO_swigregister = _PSO.PSO_swigregister
PSO_swigregister(PSO)


def swigNewCArray(*args):
  return _PSO.swigNewCArray(*args)
swigNewCArray = _PSO.swigNewCArray

def swigCArrayGet(*args):
  return _PSO.swigCArrayGet(*args)
swigCArrayGet = _PSO.swigCArrayGet

def swigCArraySet(*args):
  return _PSO.swigCArraySet(*args)
swigCArraySet = _PSO.swigCArraySet

def swigNewCppString(*args):
  return _PSO.swigNewCppString(*args)
swigNewCppString = _PSO.swigNewCppString

def swigNewIntVector():
  return _PSO.swigNewIntVector()
swigNewIntVector = _PSO.swigNewIntVector

def swigNewDblVector():
  return _PSO.swigNewDblVector()
swigNewDblVector = _PSO.swigNewDblVector

def swigNewStrVector():
  return _PSO.swigNewStrVector()
swigNewStrVector = _PSO.swigNewStrVector
class vecint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vecint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vecint, name)
    __repr__ = _swig_repr
    def iterator(self): return _PSO.vecint_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PSO.vecint___nonzero__(self)
    def __bool__(self): return _PSO.vecint___bool__(self)
    def __len__(self): return _PSO.vecint___len__(self)
    def pop(self): return _PSO.vecint_pop(self)
    def __getslice__(self, *args): return _PSO.vecint___getslice__(self, *args)
    def __setslice__(self, *args): return _PSO.vecint___setslice__(self, *args)
    def __delslice__(self, *args): return _PSO.vecint___delslice__(self, *args)
    def __delitem__(self, *args): return _PSO.vecint___delitem__(self, *args)
    def __getitem__(self, *args): return _PSO.vecint___getitem__(self, *args)
    def __setitem__(self, *args): return _PSO.vecint___setitem__(self, *args)
    def append(self, *args): return _PSO.vecint_append(self, *args)
    def empty(self): return _PSO.vecint_empty(self)
    def size(self): return _PSO.vecint_size(self)
    def clear(self): return _PSO.vecint_clear(self)
    def swap(self, *args): return _PSO.vecint_swap(self, *args)
    def get_allocator(self): return _PSO.vecint_get_allocator(self)
    def begin(self): return _PSO.vecint_begin(self)
    def end(self): return _PSO.vecint_end(self)
    def rbegin(self): return _PSO.vecint_rbegin(self)
    def rend(self): return _PSO.vecint_rend(self)
    def pop_back(self): return _PSO.vecint_pop_back(self)
    def erase(self, *args): return _PSO.vecint_erase(self, *args)
    def __init__(self, *args): 
        this = _PSO.new_vecint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PSO.vecint_push_back(self, *args)
    def front(self): return _PSO.vecint_front(self)
    def back(self): return _PSO.vecint_back(self)
    def assign(self, *args): return _PSO.vecint_assign(self, *args)
    def resize(self, *args): return _PSO.vecint_resize(self, *args)
    def insert(self, *args): return _PSO.vecint_insert(self, *args)
    def reserve(self, *args): return _PSO.vecint_reserve(self, *args)
    def capacity(self): return _PSO.vecint_capacity(self)
    __swig_destroy__ = _PSO.delete_vecint
    __del__ = lambda self : None;
vecint_swigregister = _PSO.vecint_swigregister
vecint_swigregister(vecint)

class vecdbl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vecdbl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vecdbl, name)
    __repr__ = _swig_repr
    def iterator(self): return _PSO.vecdbl_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PSO.vecdbl___nonzero__(self)
    def __bool__(self): return _PSO.vecdbl___bool__(self)
    def __len__(self): return _PSO.vecdbl___len__(self)
    def pop(self): return _PSO.vecdbl_pop(self)
    def __getslice__(self, *args): return _PSO.vecdbl___getslice__(self, *args)
    def __setslice__(self, *args): return _PSO.vecdbl___setslice__(self, *args)
    def __delslice__(self, *args): return _PSO.vecdbl___delslice__(self, *args)
    def __delitem__(self, *args): return _PSO.vecdbl___delitem__(self, *args)
    def __getitem__(self, *args): return _PSO.vecdbl___getitem__(self, *args)
    def __setitem__(self, *args): return _PSO.vecdbl___setitem__(self, *args)
    def append(self, *args): return _PSO.vecdbl_append(self, *args)
    def empty(self): return _PSO.vecdbl_empty(self)
    def size(self): return _PSO.vecdbl_size(self)
    def clear(self): return _PSO.vecdbl_clear(self)
    def swap(self, *args): return _PSO.vecdbl_swap(self, *args)
    def get_allocator(self): return _PSO.vecdbl_get_allocator(self)
    def begin(self): return _PSO.vecdbl_begin(self)
    def end(self): return _PSO.vecdbl_end(self)
    def rbegin(self): return _PSO.vecdbl_rbegin(self)
    def rend(self): return _PSO.vecdbl_rend(self)
    def pop_back(self): return _PSO.vecdbl_pop_back(self)
    def erase(self, *args): return _PSO.vecdbl_erase(self, *args)
    def __init__(self, *args): 
        this = _PSO.new_vecdbl(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PSO.vecdbl_push_back(self, *args)
    def front(self): return _PSO.vecdbl_front(self)
    def back(self): return _PSO.vecdbl_back(self)
    def assign(self, *args): return _PSO.vecdbl_assign(self, *args)
    def resize(self, *args): return _PSO.vecdbl_resize(self, *args)
    def insert(self, *args): return _PSO.vecdbl_insert(self, *args)
    def reserve(self, *args): return _PSO.vecdbl_reserve(self, *args)
    def capacity(self): return _PSO.vecdbl_capacity(self)
    __swig_destroy__ = _PSO.delete_vecdbl
    __del__ = lambda self : None;
vecdbl_swigregister = _PSO.vecdbl_swigregister
vecdbl_swigregister(vecdbl)

class vecstr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vecstr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vecstr, name)
    __repr__ = _swig_repr
    def iterator(self): return _PSO.vecstr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _PSO.vecstr___nonzero__(self)
    def __bool__(self): return _PSO.vecstr___bool__(self)
    def __len__(self): return _PSO.vecstr___len__(self)
    def pop(self): return _PSO.vecstr_pop(self)
    def __getslice__(self, *args): return _PSO.vecstr___getslice__(self, *args)
    def __setslice__(self, *args): return _PSO.vecstr___setslice__(self, *args)
    def __delslice__(self, *args): return _PSO.vecstr___delslice__(self, *args)
    def __delitem__(self, *args): return _PSO.vecstr___delitem__(self, *args)
    def __getitem__(self, *args): return _PSO.vecstr___getitem__(self, *args)
    def __setitem__(self, *args): return _PSO.vecstr___setitem__(self, *args)
    def append(self, *args): return _PSO.vecstr_append(self, *args)
    def empty(self): return _PSO.vecstr_empty(self)
    def size(self): return _PSO.vecstr_size(self)
    def clear(self): return _PSO.vecstr_clear(self)
    def swap(self, *args): return _PSO.vecstr_swap(self, *args)
    def get_allocator(self): return _PSO.vecstr_get_allocator(self)
    def begin(self): return _PSO.vecstr_begin(self)
    def end(self): return _PSO.vecstr_end(self)
    def rbegin(self): return _PSO.vecstr_rbegin(self)
    def rend(self): return _PSO.vecstr_rend(self)
    def pop_back(self): return _PSO.vecstr_pop_back(self)
    def erase(self, *args): return _PSO.vecstr_erase(self, *args)
    def __init__(self, *args): 
        this = _PSO.new_vecstr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _PSO.vecstr_push_back(self, *args)
    def front(self): return _PSO.vecstr_front(self)
    def back(self): return _PSO.vecstr_back(self)
    def assign(self, *args): return _PSO.vecstr_assign(self, *args)
    def resize(self, *args): return _PSO.vecstr_resize(self, *args)
    def insert(self, *args): return _PSO.vecstr_insert(self, *args)
    def reserve(self, *args): return _PSO.vecstr_reserve(self, *args)
    def capacity(self): return _PSO.vecstr_capacity(self)
    __swig_destroy__ = _PSO.delete_vecstr
    __del__ = lambda self : None;
vecstr_swigregister = _PSO.vecstr_swigregister
vecstr_swigregister(vecstr)

def swigPyListToCArray(pyList):
    '''
    converts python list to C-like array
    @param pyList - python list
    @return - C array
    '''
    cArray = swigNewCArray( len(pyList) )
    for i in xrange( len(pyList) ):
        swigCArraySet(cArray, i, pyList[i])
    return cArray

def swigCArrayToPyList(cArray, arraySize):
    '''
    converts C-like array to python list
    @param cArray - C array
    @param arraySize - size of the C array
    @return - python list
    '''
    pyList = [1] * arraySize
    for i in xrange(arraySize):
        pyList[i] = swigCArrayGet(cArray, i)
    return pyList


def swigPyToCppString(pyStr):
    '''
    converts python string into the c++ string
    @param pyStr - python string
    @param - c++ string
    '''
    #return pyStr
    cppStr = swigNewCppString(len(pyStr))
    for i in xrange(len(pyStr)):
        #cppStr[i] = pyStr[i]
        cppStr.push_back(pyStr[i])
    return cppStr

def swigPyListToCppVector(pyList, vartype):
    '''
    this method converts python list to c++ vector
    it is used to put data from python list into the c++ class
    @param pyList - python list
    @param vartype - type of the data in pyList;
            supported types: int, float, str
    @return - c++ vector with same data
    '''

    vector = None

    if vartype == 'array int':
        vector = swigNewIntVector()
    elif vartype == 'array float':
        vector = swigNewDblVector()
    elif vartype == 'array str':
        vector = swigNewStrVector()
    else:
        raise ValueError("wrong vartype supported to swigPyListToCppVector")

    vector.reserve( len(pyList) )

    for elem in pyList:
        vector.push_back(elem)

    return vector


class VectorAdaptor(list):
    '''
    this class is adaptor that inherits from python list, and has an adaptee
    c++ std::vector

    it is used in python where the c++ vector is in the background
    '''
    def __init__(self, vector):
        '''
        initializes the adaptor to accept the adaptee - the c++ vector
        @param vector - c++ vector
        '''
        list.__init__(self)
        self.vector = vector

    def __getitem__(self, key):
        '''
        method that is called when getting items with [] operator in python
        @param key - the index
        @return - the value from the c++ vector on the index key
        '''
        return vector[key]

    def __setitem__(self, key, item):
        '''
        method that is called when setting items with [] operator in python
        @param key - the index
        @param item - the value
        '''
        vector[key] = item 
    

# This file is compatible with both classic and new-style classes.


